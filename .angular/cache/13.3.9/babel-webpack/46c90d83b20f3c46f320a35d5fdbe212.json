{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class PromisesComponent {\n  constructor() {}\n\n  ngOnInit() {\n    let LapTop = new Promise((resolve, reject) => {\n      if (this.DellAvailable()) {\n        return setTimeout(() => {\n          resolve(\"dell is purchased\");\n        }, 3000);\n      } else if (this.HpAvailable()) {\n        return setTimeout(() => {\n          resolve(\"hp is available\");\n        }, 3000);\n      } else {\n        return setTimeout(() => {\n          reject(\"laptop is not available\");\n        }, 3000);\n      }\n    });\n    LapTop.then(res => {\n      console.log(res);\n      this.promiseval = res;\n    }).catch(res => {\n      console.log(res);\n      this.promiseval = res;\n    });\n  }\n\n  DellAvailable() {\n    return false;\n  }\n\n  HpAvailable() {\n    return false;\n  }\n\n}\n\nPromisesComponent.ɵfac = function PromisesComponent_Factory(t) {\n  return new (t || PromisesComponent)();\n};\n\nPromisesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PromisesComponent,\n  selectors: [[\"app-promises\"]],\n  decls: 13,\n  vars: 1,\n  consts: [[1, \"my-3\", 2, \"text-align\", \"center\", \"background-color\", \"aquamarine\"], [1, \"container\"], [1, \"col-md\"], [1, \"row\", \"justify-content-center\"], [1, \"col-md-4\"], [\"src\", \"https://nationaltoday.com/wp-content/uploads/2021/08/Teddy-Bear-Day-640x514.jpg\", \"height\", \"90px\", \"width\", \"90px\", \"alt\", \"\"]],\n  template: function PromisesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \"Promise\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 2);\n      i0.ɵɵtext(5, \" In Angular RxJS, a Promise is an object that represents a value that may not be available yet, but will be resolved in the future. Promises are used for asynchronous programming, where a task or operation may take some time to complete, and the result is not immediately available. A Promise has three states: pending, fulfilled, or rejected. When a Promise is in the pending state, it means that the value is not yet available. When a Promise is fulfilled, it means that the value is available and the operation was successful. When a Promise is rejected, it means that an error occurred while trying to retrieve the value. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 3)(7, \"div\", 4);\n      i0.ɵɵelement(8, \"img\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"h4\");\n      i0.ɵɵtext(10, \"Wait Response is coming\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"strong\");\n      i0.ɵɵtext(12);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(12);\n      i0.ɵɵtextInterpolate(ctx.promiseval);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9taXNlcy5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"sources":["/home/rythm/Desktop/Angular_practice/Rxjs_series/src/app/component/series/promises/promises.component.ts"],"names":["i0","PromisesComponent","constructor","ngOnInit","LapTop","Promise","resolve","reject","DellAvailable","setTimeout","HpAvailable","then","res","console","log","promiseval","catch","ɵfac","PromisesComponent_Factory","t","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","PromisesComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate","styles"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,MAAMC,iBAAN,CAAwB;AAC3BC,EAAAA,WAAW,GAAG,CAAG;;AACjBC,EAAAA,QAAQ,GAAG;AACP,QAAIC,MAAM,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1C,UAAI,KAAKC,aAAL,EAAJ,EAA0B;AACtB,eAAOC,UAAU,CAAC,MAAM;AACpBH,UAAAA,OAAO,CAAC,mBAAD,CAAP;AACH,SAFgB,EAEd,IAFc,CAAjB;AAGH,OAJD,MAKK,IAAI,KAAKI,WAAL,EAAJ,EAAwB;AACzB,eAAOD,UAAU,CAAC,MAAM;AACpBH,UAAAA,OAAO,CAAC,iBAAD,CAAP;AACH,SAFgB,EAEd,IAFc,CAAjB;AAGH,OAJI,MAKA;AACD,eAAOG,UAAU,CAAC,MAAM;AACpBF,UAAAA,MAAM,CAAC,yBAAD,CAAN;AACH,SAFgB,EAEd,IAFc,CAAjB;AAGH;AACJ,KAhBY,CAAb;AAiBAH,IAAAA,MAAM,CAACO,IAAP,CAAYC,GAAG,IAAI;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAKG,UAAL,GAAkBH,GAAlB;AACH,KAHD,EAGGI,KAHH,CAGSJ,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAKG,UAAL,GAAkBH,GAAlB;AACH,KAND;AAOH;;AACDJ,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAP;AACH;;AACDE,EAAAA,WAAW,GAAG;AACV,WAAO,KAAP;AACH;;AAjC0B;;AAmC/BT,iBAAiB,CAACgB,IAAlB,GAAyB,SAASC,yBAAT,CAAmCC,CAAnC,EAAsC;AAAE,SAAO,KAAKA,CAAC,IAAIlB,iBAAV,GAAP;AAAwC,CAAzG;;AACAA,iBAAiB,CAACmB,IAAlB,GAAyB,aAAcpB,EAAE,CAACqB,iBAAH,CAAqB;AAAEC,EAAAA,IAAI,EAAErB,iBAAR;AAA2BsB,EAAAA,SAAS,EAAE,CAAC,CAAC,cAAD,CAAD,CAAtC;AAA0DC,EAAAA,KAAK,EAAE,EAAjE;AAAqEC,EAAAA,IAAI,EAAE,CAA3E;AAA8EC,EAAAA,MAAM,EAAE,CAAC,CAAC,CAAD,EAAI,MAAJ,EAAY,CAAZ,EAAe,YAAf,EAA6B,QAA7B,EAAuC,kBAAvC,EAA2D,YAA3D,CAAD,EAA2E,CAAC,CAAD,EAAI,WAAJ,CAA3E,EAA6F,CAAC,CAAD,EAAI,QAAJ,CAA7F,EAA4G,CAAC,CAAD,EAAI,KAAJ,EAAW,wBAAX,CAA5G,EAAkJ,CAAC,CAAD,EAAI,UAAJ,CAAlJ,EAAmK,CAAC,KAAD,EAAQ,iFAAR,EAA2F,QAA3F,EAAqG,MAArG,EAA6G,OAA7G,EAAsH,MAAtH,EAA8H,KAA9H,EAAqI,EAArI,CAAnK,CAAtF;AAAoYC,EAAAA,QAAQ,EAAE,SAASC,0BAAT,CAAoCC,EAApC,EAAwCC,GAAxC,EAA6C;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AAC7f7B,MAAAA,EAAE,CAAC+B,cAAH,CAAkB,CAAlB,EAAqB,KAArB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,IAAlC;AACA/B,MAAAA,EAAE,CAACgC,MAAH,CAAU,CAAV,EAAa,SAAb;AACAhC,MAAAA,EAAE,CAACiC,YAAH;AACAjC,MAAAA,EAAE,CAAC+B,cAAH,CAAkB,CAAlB,EAAqB,KAArB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,EAAyC,CAAzC;AACA/B,MAAAA,EAAE,CAACgC,MAAH,CAAU,CAAV,EAAa,onBAAb;AACAhC,MAAAA,EAAE,CAACiC,YAAH;AACAjC,MAAAA,EAAE,CAAC+B,cAAH,CAAkB,CAAlB,EAAqB,KAArB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,KAAlC,EAAyC,CAAzC;AACA/B,MAAAA,EAAE,CAACkC,SAAH,CAAa,CAAb,EAAgB,KAAhB,EAAuB,CAAvB;AACAlC,MAAAA,EAAE,CAACiC,YAAH;AACAjC,MAAAA,EAAE,CAAC+B,cAAH,CAAkB,CAAlB,EAAqB,IAArB;AACA/B,MAAAA,EAAE,CAACgC,MAAH,CAAU,EAAV,EAAc,yBAAd;AACAhC,MAAAA,EAAE,CAACiC,YAAH;AACAjC,MAAAA,EAAE,CAAC+B,cAAH,CAAkB,EAAlB,EAAsB,QAAtB;AACA/B,MAAAA,EAAE,CAACgC,MAAH,CAAU,EAAV;AACAhC,MAAAA,EAAE,CAACiC,YAAH;AACH;;AAAC,QAAIJ,EAAE,GAAG,CAAT,EAAY;AACV7B,MAAAA,EAAE,CAACmC,SAAH,CAAa,EAAb;AACAnC,MAAAA,EAAE,CAACoC,iBAAH,CAAqBN,GAAG,CAACf,UAAzB;AACH;AAAE,GAnBqD;AAmBnDsB,EAAAA,MAAM,EAAE,CAAC,yKAAD;AAnB2C,CAArB,CAAvC","sourcesContent":["import * as i0 from \"@angular/core\";\nexport class PromisesComponent {\n    constructor() { }\n    ngOnInit() {\n        let LapTop = new Promise((resolve, reject) => {\n            if (this.DellAvailable()) {\n                return setTimeout(() => {\n                    resolve(\"dell is purchased\");\n                }, 3000);\n            }\n            else if (this.HpAvailable()) {\n                return setTimeout(() => {\n                    resolve(\"hp is available\");\n                }, 3000);\n            }\n            else {\n                return setTimeout(() => {\n                    reject(\"laptop is not available\");\n                }, 3000);\n            }\n        });\n        LapTop.then(res => {\n            console.log(res);\n            this.promiseval = res;\n        }).catch(res => {\n            console.log(res);\n            this.promiseval = res;\n        });\n    }\n    DellAvailable() {\n        return false;\n    }\n    HpAvailable() {\n        return false;\n    }\n}\nPromisesComponent.ɵfac = function PromisesComponent_Factory(t) { return new (t || PromisesComponent)(); };\nPromisesComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PromisesComponent, selectors: [[\"app-promises\"]], decls: 13, vars: 1, consts: [[1, \"my-3\", 2, \"text-align\", \"center\", \"background-color\", \"aquamarine\"], [1, \"container\"], [1, \"col-md\"], [1, \"row\", \"justify-content-center\"], [1, \"col-md-4\"], [\"src\", \"https://nationaltoday.com/wp-content/uploads/2021/08/Teddy-Bear-Day-640x514.jpg\", \"height\", \"90px\", \"width\", \"90px\", \"alt\", \"\"]], template: function PromisesComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Promise\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 2);\n        i0.ɵɵtext(5, \" In Angular RxJS, a Promise is an object that represents a value that may not be available yet, but will be resolved in the future. Promises are used for asynchronous programming, where a task or operation may take some time to complete, and the result is not immediately available. A Promise has three states: pending, fulfilled, or rejected. When a Promise is in the pending state, it means that the value is not yet available. When a Promise is fulfilled, it means that the value is available and the operation was successful. When a Promise is rejected, it means that an error occurred while trying to retrieve the value. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 3)(7, \"div\", 4);\n        i0.ɵɵelement(8, \"img\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"h4\");\n        i0.ɵɵtext(10, \"Wait Response is coming\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"strong\");\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd()();\n    } if (rf & 2) {\n        i0.ɵɵadvance(12);\n        i0.ɵɵtextInterpolate(ctx.promiseval);\n    } }, styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9taXNlcy5jb21wb25lbnQuY3NzIn0= */\"] });\n"]},"metadata":{},"sourceType":"module"}